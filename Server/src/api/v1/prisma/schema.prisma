generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  firstName     String
  lastName      String
  image         String?    @default("https://www.shutterstock.com/image-vector/profile-default-avatar-icon-user-600nw-2463844171.jpg")
  bio           String
  coverImage    String?
  location      String?
  comment       Comment[]
  likes         Like[]     @relation("UserLikes")
  phoneNumber   String     @default("000-000-0000")
  reviews       Review[]
  followers     Follower[] @relation("Followees")
  following     Follower[] @relation("Followers")
  ownedProducts Product[]  @relation("Owner")
  cart          Cart?
  wishlist      Wishlist?
  addresses     Address[]
  orders        Order[]
  createdAt     DateTime   @default(now())
}

model Product {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  product_name        String
  price               Float
  product_image       String[]
  product_description String
  userEmail           String
  likes               Like[]   @relation("ProductLikes")
  reviews             Review[]
  sizes               String[]
  colors              String[]
  owner               User     @relation("Owner", fields: [userEmail], references: [email])

  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id]) // Link to Category model

  OrderItem    OrderItem[]
  CartItem     CartItem[]
  Inventory    Inventory[]
  WishlistItem WishlistItem[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Like[]   @relation("CommentLikes")
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  User      User?    @relation(fields: [userEmail], references: [email])
  userEmail String
  createdAt DateTime @default(now())
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[] // One-to-many relationship with Product
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade) // Added onDelete here
  product Product  @relation("ProductLikes", fields: [productId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // New unique constraint for userId and productId
  @@unique([userId, productId, commentId]) // Keep this if you need to also check by commentId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userEmail String?  // Make userEmail optional if a user is not always required
  user      User?    @relation(fields: [userEmail], references: [email]) // Make user relation optional
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
}


model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("Followers", fields: [followerId], references: [id])
  followee   User     @relation("Followees", fields: [followeeId], references: [id])
  followerId String   @db.ObjectId
  followeeId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId]) // Ensure a user can follow another user only once
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[] // Array of items in the order
  status      String      @default("Pending") // e.g., Pending, Shipped, Delivered, Cancelled
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Payment     Payment[]
  Shipping    Shipping[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String   @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  status        String // e.g., Success, Failed, Pending
  paymentDate   DateTime @default(now())
  paymentMethod String // e.g., Card, PayPal, etc.
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId // Add @unique here
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false) // To mark the primary address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipping {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String    @db.ObjectId
  order             Order     @relation(fields: [orderId], references: [id])
  carrier           String
  trackingNumber    String?
  status            String
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Wishlist {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @unique @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())
}
