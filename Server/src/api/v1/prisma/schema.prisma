generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum CategoryEnum {
  CLOTHING
  BAGS
  WATCH
  FABRIC
  JEWELLARY
  SHOES
}

enum GenderEnum {
  MALE
  FEMALE
  UNISEX
}

enum Role {
  USER
  SELLER
  ADMIN
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  email      String  @unique
  firstName  String
  lastName   String
  role       Role    @default(USER)
  image      String?
  bio        String
  coverImage String?

  comment         Comment[]
  likes           Like[]         @relation("UserLikes")
  phoneNumber     String         @default("000-000-0000")
  reviews         Review[]
  followers       Follower[]     @relation("Followees")
  following       Follower[]     @relation("Followers")
  ownedProducts   Product[]      @relation("Owner")
  cartId          String?        @db.ObjectId
  wishlist        Wishlist?
  addresses       Address[]
  orders          Order[]
  createdAt       DateTime       @default(now())
  Cart            Cart?
  sellerProfile   SellerProfile? @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String?        @db.ObjectId
  messages        Message[]
}

model SellerProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  storeName   String
  description String
  location    String?
  User        User[]
}

model Product {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  product_name        String
  price               Float
  product_image       String[]
  product_description String
  userEmail           String
  likes               Like[]    @relation("ProductLikes")
  reviews             Review[]
  sizes               String[]
  colors              String[]
  owner               User      @relation("Owner", fields: [userEmail], references: [email])
  comments            Comment[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id]) // Link to Category model

  OrderItem OrderItem[] @relation("OrderItem")
  CartItem  CartItem[]
  Inventory Inventory[]
  Wishlist  Wishlist[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Like[]   @relation("CommentLikes")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  User      User?    @relation(fields: [userEmail], references: [email])
  userEmail String
  createdAt DateTime @default(now())
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[] // One-to-many relationship with Product
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())

  user    User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  product Product  @relation("ProductLikes", fields: [productId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // New unique constraint for userId and productId
  @@unique([userId, productId, commentId]) // Keep this if you need to also check by commentId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userEmail String?
  user      User?    @relation(fields: [userEmail], references: [email])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("Followers", fields: [followerId], references: [id])
  followee   User     @relation("Followees", fields: [followeeId], references: [id])
  followerId String   @db.ObjectId
  followeeId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId]) // Ensure a user can follow another user only once
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[] // Array of items in the order
  status      String      @default("Pending") // e.g., Pending, Shipped, Delivered, Cancelled
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Payment     Payment[]
  Shipping    Shipping[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation("OrderItem", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String   @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id])
  amount        Float
  status        String
  paymentDate   DateTime @default(now())
  paymentMethod String
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[] // Relation to CartItem
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([cartId, productId]) // Add this line for composite unique constraint
}

model Address {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  town      String?
  Region    String
  phone     String
  zipCode   String?
  country   String
  isDefault Boolean    @default(false) // To mark the primary address
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  shippings Shipping[]
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipping {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String    @db.ObjectId
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier           String
  trackingNumber    String?
  status            String
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  addressId         String    @db.ObjectId
  address           Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  members   String[] // Array of user ids
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  text      String
  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
