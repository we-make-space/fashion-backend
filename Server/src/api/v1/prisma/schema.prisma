generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum CategoryEnum {
  CLOTHING
  BAGS
  WATCH
  FABRIC
  JEWELLARY
  SHOES
}

enum GenderEnum {
  MALE
  FEMALE
  UNISEX
}

enum Role {
  USER
  SELLER
  ADMIN
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  firstName     String
  lastName      String
  role          Role       @default(USER)
  image         String?
  bio           String
  coverImage    String?
  location      String?
  comment       Comment[]
  phoneNumber   String     @default("000-000-0000")
  likes         Like[]
  reviews       Review[]
  followers     Follower[] @relation("Followees")
  following     Follower[] @relation("Followers")
  ownedProducts Product[]  @relation("Owner")
  orders        Order[]    @relation("user_orders")
  createdAt     DateTime   @default(now())
}

model Product {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  product_name        String
  price               Float
  product_image       ProductImage[] @relation("Product")
  product_description String
  userEmail           String
  stock               Int
  active              Boolean        @default(true)
  likes               Like[]
  reviews             Review[]
  orderItems          OrderItem[]
  owner               User           @relation("Owner", fields: [userEmail], references: [email])
  comments            Comment[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  gender              GenderEnum
  colors              String[]
  condition           String?        @default("")
  brand               String?        @default("")
  material            String?        @default("")
  feature             String?        @default("")
  occasion            String?        @default("")
  sizes               String[]
  match               String?        @default("")
  tags                String[]
  fabricType          String?        @default("")
  origin              String?        @default("")
  closureType         String?        @default("")
  neckStyle           String?        @default("")
  display             String?        @default("")
  type                String?        @default("")
  categoryName        CategoryEnum
  category            Category       @relation("category", fields: [categoryName], references: [name])
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  product   Product  @relation("Product", fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @db.ObjectId
}

model Category {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        CategoryEnum @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  products    Product[]    @relation("category")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation("user_orders", references: [id], fields: [userId])
  userId     String      @db.ObjectId
  status     OrderStatus @default(PENDING)
  total      Float
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int

  @@unique([orderId, productId], name: "orderItem_unique_constraint")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Like[]
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  User      User?    @relation(fields: [userEmail], references: [email])
  userEmail String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  commentId String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  User    User?    @relation(fields: [userEmail], references: [email])
  product Product? @relation(fields: [productId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@unique([userEmail, commentId]) // Ensure a user can only like a comment once
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  follower   User     @relation("Followers", fields: [followerId], references: [id])
  followee   User     @relation("Followees", fields: [followeeId], references: [id])
  followerId String   @db.ObjectId
  followeeId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@unique([followerId, followeeId]) // Ensure a user can follow another user only once
}

// Payment model
model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  method    String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String   @db.ObjectId
}
